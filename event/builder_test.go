package event_test

import (
	"testing"
	"time"

	"github.com/benjic/nostr/event"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
	testPrivateKey = []byte{
		0x2e, 0x42, 0xf5, 0x6, 0x80, 0xe6, 0x22, 0x8b,
		0x8d, 0xf7, 0xa4, 0x84, 0x40, 0x51, 0x8a, 0x35,
		0x57, 0x19, 0xdf, 0x22, 0x3a, 0xaf, 0x5, 0xf2,
		0x98, 0x69, 0x6b, 0x8c, 0xc3, 0x86, 0x29, 0x2f,
	}
)

func Test_Builder(t *testing.T) {
	t.Run("returns signed event", func(t *testing.T) {

		b := event.NewBuilder(2, "Hello World", testPrivateKey)

		ts, err := time.Parse(time.DateOnly, "2024-10-05")
		require.NoError(t, err)
		b.SetTimestamp(ts)

		tags := event.Tags{
			{"e", "5c83da77af1dec6d7289834998ad7aafbd9e2191396d75ec3cc27f5a77226f36", "wss://nostr.example.com"},
			{"p", "f7234bd4c1394dda46d09f35bd384dd30cc552ad5541990f98844fb06676e9ca"},
		}
		b.SetTags(tags)

		e, err := b.Build()
		assert.NoError(t, err)
		assert.Equal(
			t,
			event.Event{
				ID: event.ID{
					0xf9, 0x75, 0x6d, 0xe7, 0x6a, 0x1b, 0x4d, 0x99,
					0x16, 0x31, 0xd2, 0x4d, 0xa5, 0x4d, 0x77, 0x63,
					0x5f, 0x62, 0xd7, 0x05, 0xfd, 0x0f, 0xa2, 0xfd,
					0x96, 0xc0, 0x5a, 0x86, 0x4e, 0xd6, 0x7b, 0x46,
				},
				PubKey: event.PubKey{
					0xe6, 0x4c, 0x94, 0xc8, 0x39, 0xb9, 0xb8, 0xef,
					0x4b, 0x6c, 0x94, 0x9d, 0xc1, 0xd1, 0x8d, 0xc4,
					0x6d, 0x2e, 0xcd, 0x7c, 0xfd, 0x2d, 0x42, 0xec,
					0x66, 0xe8, 0x6b, 0xa3, 0x54, 0x18, 0x19, 0xb6,
				},
				Signature: event.Signature{
					0x1e, 0xd1, 0x4a, 0x23, 0xdb, 0x43, 0xb1, 0xe5,
					0x39, 0x12, 0xfc, 0x3c, 0x94, 0xfe, 0xcb, 0xf2,
					0x75, 0xce, 0x7d, 0x2b, 0x14, 0x10, 0x73, 0x06,
					0xcc, 0xbb, 0x63, 0xf7, 0x39, 0xee, 0x26, 0x54,
					0x9b, 0x65, 0x41, 0x8a, 0xc2, 0xfd, 0x91, 0x7c,
					0x0d, 0xaa, 0x0f, 0x5c, 0x3a, 0x3f, 0xa1, 0x52,
					0xa4, 0x96, 0x08, 0x24, 0x4d, 0x88, 0x32, 0x1d,
					0x2d, 0xe2, 0x5f, 0x82, 0xff, 0x05, 0x05, 0x87,
				},
				Payload: event.Payload{
					Kind:      2,
					Content:   "Hello World",
					Timestamp: ts.Unix(),
					Tags:      tags,
				},
			},
			e,
		)
	})
}
